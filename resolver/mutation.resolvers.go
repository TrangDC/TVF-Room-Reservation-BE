package resolver

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.48

import (
	"context"
	"net/http"

	"github.com/google/uuid"
	"gitlab.techvify.dev/its/internship/q2-2024/project/meeting-room-reservation/meeting-room-reservation-be/ent"
	graphql1 "gitlab.techvify.dev/its/internship/q2-2024/project/meeting-room-reservation/meeting-room-reservation-be/graphql"
	"gitlab.techvify.dev/its/internship/q2-2024/project/meeting-room-reservation/meeting-room-reservation-be/internal/util"
)

// CreateOffice is the resolver for the CreateOffice field.
func (r *mutationResolver) CreateOffice(ctx context.Context, input ent.CreateOfficeInput) (*ent.OfficeResponse, error) {
	return r.serviceRegistry.Office().CreateOffice(ctx, input)
}

// UpdateOffice is the resolver for the UpdateOffice field.
func (r *mutationResolver) UpdateOffice(ctx context.Context, input ent.UpdateOfficeInput) (*ent.OfficeResponse, error) {
	return r.serviceRegistry.Office().UpdateOffice(ctx, input)
}

// DeleteOffice is the resolver for the DeleteOffice field.
func (r *mutationResolver) DeleteOffice(ctx context.Context, officeID string) (string, error) {
	id, err := uuid.Parse(officeID)
	if err != nil {
		return "", util.WrapGQLError(ctx, "failed to parse office id", http.StatusBadRequest, util.ErrorFlagCanNotDelete)
	}
	return r.serviceRegistry.Office().DeleteOffice(ctx, id)
}

// CreateRoom is the resolver for the CreateRoom field.
func (r *mutationResolver) CreateRoom(ctx context.Context, input ent.CreateRoomInput) (*ent.RoomResponse, error) {
	return r.serviceRegistry.Room().CreateRoom(ctx, input)
}

// UpdateRoom is the resolver for the UpdateRoom field.
func (r *mutationResolver) UpdateRoom(ctx context.Context, input ent.UpdateRoomInput) (*ent.RoomResponse, error) {
	return r.serviceRegistry.Room().UpdateRoom(ctx, input)
}

// DeleteRoom is the resolver for the DeleteRoom field.
func (r *mutationResolver) DeleteRoom(ctx context.Context, roomID string) (string, error) {
	id, err := uuid.Parse(roomID)
	if err != nil {
		return "", util.WrapGQLError(ctx, "failed to parse room id", http.StatusBadRequest, util.ErrorFlagCanNotDelete)
	}
	return r.serviceRegistry.Room().DeleteRoom(ctx, id)
}

// CreateBooking is the resolver for the CreateBooking field.
func (r *mutationResolver) CreateBooking(ctx context.Context, input ent.CreateBookingInput) (*ent.BookingResponse, error) {
	return r.serviceRegistry.Booking().CreateBooking(ctx, input)
}

// UpdateBooking is the resolver for the UpdateBooking field.
func (r *mutationResolver) UpdateBooking(ctx context.Context, input ent.UpdateBookingInput) (*ent.BookingResponse, error) {
	return r.serviceRegistry.Booking().UpdateBooking(ctx, input)
}

// CancelBooking is the resolver for the CancelBooking field.
func (r *mutationResolver) CancelBooking(ctx context.Context, bookingID string) (string, error) {
	id, err := uuid.Parse(bookingID)
	if err != nil {
		return "", util.WrapGQLError(ctx, "failed to parse booking id", http.StatusBadRequest, util.ErrorFlagCanNotDelete)
	}
	return r.serviceRegistry.Booking().CancelBooking(ctx, id)
}

// AssignRole is the resolver for the AssignRole field.
func (r *mutationResolver) AssignRole(ctx context.Context, input ent.AssignRoleInput) (*ent.UserResponse, error) {
	return r.serviceRegistry.User().AssignRole(ctx, input)
}

// UnassignRole is the resolver for the UnassignRole field.
func (r *mutationResolver) UnassignRole(ctx context.Context, input ent.UnassignRoleInput) (*ent.UserResponse, error) {
	return r.serviceRegistry.User().UnassignRole(ctx, input)
}

// Mutation returns graphql1.MutationResolver implementation.
func (r *Resolver) Mutation() graphql1.MutationResolver { return &mutationResolver{r} }

type mutationResolver struct{ *Resolver }
