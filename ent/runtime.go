// Code generated by ent, DO NOT EDIT.

package ent

import (
	"time"

	"github.com/google/uuid"
	"gitlab.techvify.dev/its/internship/q2-2024/project/meeting-room-reservation/meeting-room-reservation-be/ent/booking"
	"gitlab.techvify.dev/its/internship/q2-2024/project/meeting-room-reservation/meeting-room-reservation-be/ent/office"
	"gitlab.techvify.dev/its/internship/q2-2024/project/meeting-room-reservation/meeting-room-reservation-be/ent/role"
	"gitlab.techvify.dev/its/internship/q2-2024/project/meeting-room-reservation/meeting-room-reservation-be/ent/room"
	"gitlab.techvify.dev/its/internship/q2-2024/project/meeting-room-reservation/meeting-room-reservation-be/ent/schema"
	"gitlab.techvify.dev/its/internship/q2-2024/project/meeting-room-reservation/meeting-room-reservation-be/ent/user"
	"gitlab.techvify.dev/its/internship/q2-2024/project/meeting-room-reservation/meeting-room-reservation-be/ent/userrole"
)

// The init function reads all schema descriptors with runtime code
// (default values, validators, hooks and policies) and stitches it
// to their package variables.
func init() {
	bookingMixin := schema.Booking{}.Mixin()
	bookingMixinFields0 := bookingMixin[0].Fields()
	_ = bookingMixinFields0
	bookingMixinFields1 := bookingMixin[1].Fields()
	_ = bookingMixinFields1
	bookingFields := schema.Booking{}.Fields()
	_ = bookingFields
	// bookingDescCreatedAt is the schema descriptor for created_at field.
	bookingDescCreatedAt := bookingMixinFields0[1].Descriptor()
	// booking.DefaultCreatedAt holds the default value on creation for the created_at field.
	booking.DefaultCreatedAt = bookingDescCreatedAt.Default.(func() time.Time)
	// bookingDescSlug is the schema descriptor for slug field.
	bookingDescSlug := bookingMixinFields1[0].Descriptor()
	// booking.SlugValidator is a validator for the "slug" field. It is called by the builders before save.
	booking.SlugValidator = bookingDescSlug.Validators[0].(func(string) error)
	// bookingDescTitle is the schema descriptor for title field.
	bookingDescTitle := bookingFields[1].Descriptor()
	// booking.TitleValidator is a validator for the "title" field. It is called by the builders before save.
	booking.TitleValidator = func() func(string) error {
		validators := bookingDescTitle.Validators
		fns := [...]func(string) error{
			validators[0].(func(string) error),
			validators[1].(func(string) error),
		}
		return func(title string) error {
			for _, fn := range fns {
				if err := fn(title); err != nil {
					return err
				}
			}
			return nil
		}
	}()
	// bookingDescIsRepeat is the schema descriptor for is_repeat field.
	bookingDescIsRepeat := bookingFields[4].Descriptor()
	// booking.DefaultIsRepeat holds the default value on creation for the is_repeat field.
	booking.DefaultIsRepeat = bookingDescIsRepeat.Default.(bool)
	// bookingDescID is the schema descriptor for id field.
	bookingDescID := bookingFields[0].Descriptor()
	// booking.DefaultID holds the default value on creation for the id field.
	booking.DefaultID = bookingDescID.Default.(func() uuid.UUID)
	officeFields := schema.Office{}.Fields()
	_ = officeFields
	// officeDescName is the schema descriptor for name field.
	officeDescName := officeFields[1].Descriptor()
	// office.NameValidator is a validator for the "name" field. It is called by the builders before save.
	office.NameValidator = func() func(string) error {
		validators := officeDescName.Validators
		fns := [...]func(string) error{
			validators[0].(func(string) error),
			validators[1].(func(string) error),
		}
		return func(name string) error {
			for _, fn := range fns {
				if err := fn(name); err != nil {
					return err
				}
			}
			return nil
		}
	}()
	// officeDescID is the schema descriptor for id field.
	officeDescID := officeFields[0].Descriptor()
	// office.DefaultID holds the default value on creation for the id field.
	office.DefaultID = officeDescID.Default.(func() uuid.UUID)
	roleFields := schema.Role{}.Fields()
	_ = roleFields
	// roleDescMachineName is the schema descriptor for machine_name field.
	roleDescMachineName := roleFields[1].Descriptor()
	// role.MachineNameValidator is a validator for the "machine_name" field. It is called by the builders before save.
	role.MachineNameValidator = func() func(string) error {
		validators := roleDescMachineName.Validators
		fns := [...]func(string) error{
			validators[0].(func(string) error),
			validators[1].(func(string) error),
		}
		return func(machine_name string) error {
			for _, fn := range fns {
				if err := fn(machine_name); err != nil {
					return err
				}
			}
			return nil
		}
	}()
	// roleDescName is the schema descriptor for name field.
	roleDescName := roleFields[2].Descriptor()
	// role.NameValidator is a validator for the "name" field. It is called by the builders before save.
	role.NameValidator = func() func(string) error {
		validators := roleDescName.Validators
		fns := [...]func(string) error{
			validators[0].(func(string) error),
			validators[1].(func(string) error),
		}
		return func(name string) error {
			for _, fn := range fns {
				if err := fn(name); err != nil {
					return err
				}
			}
			return nil
		}
	}()
	// roleDescID is the schema descriptor for id field.
	roleDescID := roleFields[0].Descriptor()
	// role.DefaultID holds the default value on creation for the id field.
	role.DefaultID = roleDescID.Default.(func() uuid.UUID)
	roomFields := schema.Room{}.Fields()
	_ = roomFields
	// roomDescName is the schema descriptor for name field.
	roomDescName := roomFields[1].Descriptor()
	// room.NameValidator is a validator for the "name" field. It is called by the builders before save.
	room.NameValidator = func() func(string) error {
		validators := roomDescName.Validators
		fns := [...]func(string) error{
			validators[0].(func(string) error),
			validators[1].(func(string) error),
		}
		return func(name string) error {
			for _, fn := range fns {
				if err := fn(name); err != nil {
					return err
				}
			}
			return nil
		}
	}()
	// roomDescColor is the schema descriptor for color field.
	roomDescColor := roomFields[2].Descriptor()
	// room.ColorValidator is a validator for the "color" field. It is called by the builders before save.
	room.ColorValidator = func() func(string) error {
		validators := roomDescColor.Validators
		fns := [...]func(string) error{
			validators[0].(func(string) error),
			validators[1].(func(string) error),
			validators[2].(func(string) error),
			validators[3].(func(string) error),
		}
		return func(color string) error {
			for _, fn := range fns {
				if err := fn(color); err != nil {
					return err
				}
			}
			return nil
		}
	}()
	// roomDescFloor is the schema descriptor for floor field.
	roomDescFloor := roomFields[3].Descriptor()
	// room.FloorValidator is a validator for the "floor" field. It is called by the builders before save.
	room.FloorValidator = func() func(string) error {
		validators := roomDescFloor.Validators
		fns := [...]func(string) error{
			validators[0].(func(string) error),
			validators[1].(func(string) error),
		}
		return func(floor string) error {
			for _, fn := range fns {
				if err := fn(floor); err != nil {
					return err
				}
			}
			return nil
		}
	}()
	// roomDescImageURL is the schema descriptor for image_url field.
	roomDescImageURL := roomFields[6].Descriptor()
	// room.ImageURLValidator is a validator for the "image_url" field. It is called by the builders before save.
	room.ImageURLValidator = roomDescImageURL.Validators[0].(func(string) error)
	// roomDescIsDeleted is the schema descriptor for is_deleted field.
	roomDescIsDeleted := roomFields[7].Descriptor()
	// room.DefaultIsDeleted holds the default value on creation for the is_deleted field.
	room.DefaultIsDeleted = roomDescIsDeleted.Default.(bool)
	// roomDescID is the schema descriptor for id field.
	roomDescID := roomFields[0].Descriptor()
	// room.DefaultID holds the default value on creation for the id field.
	room.DefaultID = roomDescID.Default.(func() uuid.UUID)
	userFields := schema.User{}.Fields()
	_ = userFields
	// userDescName is the schema descriptor for name field.
	userDescName := userFields[1].Descriptor()
	// user.NameValidator is a validator for the "name" field. It is called by the builders before save.
	user.NameValidator = func() func(string) error {
		validators := userDescName.Validators
		fns := [...]func(string) error{
			validators[0].(func(string) error),
			validators[1].(func(string) error),
		}
		return func(name string) error {
			for _, fn := range fns {
				if err := fn(name); err != nil {
					return err
				}
			}
			return nil
		}
	}()
	// userDescWorkEmail is the schema descriptor for work_email field.
	userDescWorkEmail := userFields[2].Descriptor()
	// user.WorkEmailValidator is a validator for the "work_email" field. It is called by the builders before save.
	user.WorkEmailValidator = func() func(string) error {
		validators := userDescWorkEmail.Validators
		fns := [...]func(string) error{
			validators[0].(func(string) error),
			validators[1].(func(string) error),
		}
		return func(work_email string) error {
			for _, fn := range fns {
				if err := fn(work_email); err != nil {
					return err
				}
			}
			return nil
		}
	}()
	// userDescOid is the schema descriptor for oid field.
	userDescOid := userFields[3].Descriptor()
	// user.OidValidator is a validator for the "oid" field. It is called by the builders before save.
	user.OidValidator = userDescOid.Validators[0].(func(string) error)
	// userDescID is the schema descriptor for id field.
	userDescID := userFields[0].Descriptor()
	// user.DefaultID holds the default value on creation for the id field.
	user.DefaultID = userDescID.Default.(func() uuid.UUID)
	userroleFields := schema.UserRole{}.Fields()
	_ = userroleFields
	// userroleDescID is the schema descriptor for id field.
	userroleDescID := userroleFields[0].Descriptor()
	// userrole.DefaultID holds the default value on creation for the id field.
	userrole.DefaultID = userroleDescID.Default.(func() uuid.UUID)
}
