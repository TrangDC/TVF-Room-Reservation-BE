// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"github.com/google/uuid"
	"gitlab.techvify.dev/its/internship/q2-2024/project/meeting-room-reservation/meeting-room-reservation-be/ent/office"
)

// Office is the model entity for the Office schema.
type Office struct {
	config `json:"-"`
	// ID of the ent.
	ID uuid.UUID `json:"id,omitempty"`
	// Name holds the value of the "name" field.
	Name string `json:"name,omitempty"`
	// Description holds the value of the "description" field.
	Description string `json:"description,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the OfficeQuery when eager-loading is set.
	Edges        OfficeEdges `json:"edges"`
	selectValues sql.SelectValues
}

// OfficeEdges holds the relations/edges for other nodes in the graph.
type OfficeEdges struct {
	// Rooms holds the value of the rooms edge.
	Rooms []*Room `json:"rooms,omitempty"`
	// Bookings holds the value of the bookings edge.
	Bookings []*Booking `json:"bookings,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [2]bool
}

// RoomsOrErr returns the Rooms value or an error if the edge
// was not loaded in eager-loading.
func (e OfficeEdges) RoomsOrErr() ([]*Room, error) {
	if e.loadedTypes[0] {
		return e.Rooms, nil
	}
	return nil, &NotLoadedError{edge: "rooms"}
}

// BookingsOrErr returns the Bookings value or an error if the edge
// was not loaded in eager-loading.
func (e OfficeEdges) BookingsOrErr() ([]*Booking, error) {
	if e.loadedTypes[1] {
		return e.Bookings, nil
	}
	return nil, &NotLoadedError{edge: "bookings"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*Office) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case office.FieldName, office.FieldDescription:
			values[i] = new(sql.NullString)
		case office.FieldID:
			values[i] = new(uuid.UUID)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the Office fields.
func (o *Office) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case office.FieldID:
			if value, ok := values[i].(*uuid.UUID); !ok {
				return fmt.Errorf("unexpected type %T for field id", values[i])
			} else if value != nil {
				o.ID = *value
			}
		case office.FieldName:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field name", values[i])
			} else if value.Valid {
				o.Name = value.String
			}
		case office.FieldDescription:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field description", values[i])
			} else if value.Valid {
				o.Description = value.String
			}
		default:
			o.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the Office.
// This includes values selected through modifiers, order, etc.
func (o *Office) Value(name string) (ent.Value, error) {
	return o.selectValues.Get(name)
}

// QueryRooms queries the "rooms" edge of the Office entity.
func (o *Office) QueryRooms() *RoomQuery {
	return NewOfficeClient(o.config).QueryRooms(o)
}

// QueryBookings queries the "bookings" edge of the Office entity.
func (o *Office) QueryBookings() *BookingQuery {
	return NewOfficeClient(o.config).QueryBookings(o)
}

// Update returns a builder for updating this Office.
// Note that you need to call Office.Unwrap() before calling this method if this Office
// was returned from a transaction, and the transaction was committed or rolled back.
func (o *Office) Update() *OfficeUpdateOne {
	return NewOfficeClient(o.config).UpdateOne(o)
}

// Unwrap unwraps the Office entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (o *Office) Unwrap() *Office {
	_tx, ok := o.config.driver.(*txDriver)
	if !ok {
		panic("ent: Office is not a transactional entity")
	}
	o.config.driver = _tx.drv
	return o
}

// String implements the fmt.Stringer.
func (o *Office) String() string {
	var builder strings.Builder
	builder.WriteString("Office(")
	builder.WriteString(fmt.Sprintf("id=%v, ", o.ID))
	builder.WriteString("name=")
	builder.WriteString(o.Name)
	builder.WriteString(", ")
	builder.WriteString("description=")
	builder.WriteString(o.Description)
	builder.WriteByte(')')
	return builder.String()
}

// Offices is a parsable slice of Office.
type Offices []*Office
