// Code generated by MockGen. DO NOT EDIT.
// Source: repository/booking.repository.go

// Package mock is a generated GoMock package.
package mock

import (
	context "context"
	reflect "reflect"
	time "time"

	gomock "github.com/golang/mock/gomock"
	uuid "github.com/google/uuid"
	dto "gitlab.techvify.dev/its/internship/q2-2024/project/meeting-room-reservation/meeting-room-reservation-be/dto"
	ent "gitlab.techvify.dev/its/internship/q2-2024/project/meeting-room-reservation/meeting-room-reservation-be/ent"
)

// MockBookingRepository is a mock of BookingRepository interface.
type MockBookingRepository struct {
	ctrl     *gomock.Controller
	recorder *MockBookingRepositoryMockRecorder
}

// MockBookingRepositoryMockRecorder is the mock recorder for MockBookingRepository.
type MockBookingRepositoryMockRecorder struct {
	mock *MockBookingRepository
}

// NewMockBookingRepository creates a new mock instance.
func NewMockBookingRepository(ctrl *gomock.Controller) *MockBookingRepository {
	mock := &MockBookingRepository{ctrl: ctrl}
	mock.recorder = &MockBookingRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockBookingRepository) EXPECT() *MockBookingRepositoryMockRecorder {
	return m.recorder
}

// BuildCount mocks base method.
func (m *MockBookingRepository) BuildCount(ctx context.Context, query *ent.BookingQuery) (int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "BuildCount", ctx, query)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// BuildCount indicates an expected call of BuildCount.
func (mr *MockBookingRepositoryMockRecorder) BuildCount(ctx, query interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "BuildCount", reflect.TypeOf((*MockBookingRepository)(nil).BuildCount), ctx, query)
}

// BuildGet mocks base method.
func (m *MockBookingRepository) BuildGet(ctx context.Context, query *ent.BookingQuery) (*ent.Booking, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "BuildGet", ctx, query)
	ret0, _ := ret[0].(*ent.Booking)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// BuildGet indicates an expected call of BuildGet.
func (mr *MockBookingRepositoryMockRecorder) BuildGet(ctx, query interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "BuildGet", reflect.TypeOf((*MockBookingRepository)(nil).BuildGet), ctx, query)
}

// BuildList mocks base method.
func (m *MockBookingRepository) BuildList(ctx context.Context, query *ent.BookingQuery) ([]*ent.Booking, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "BuildList", ctx, query)
	ret0, _ := ret[0].([]*ent.Booking)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// BuildList indicates an expected call of BuildList.
func (mr *MockBookingRepositoryMockRecorder) BuildList(ctx, query interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "BuildList", reflect.TypeOf((*MockBookingRepository)(nil).BuildList), ctx, query)
}

// BuildQuery mocks base method.
func (m *MockBookingRepository) BuildQuery() *ent.BookingQuery {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "BuildQuery")
	ret0, _ := ret[0].(*ent.BookingQuery)
	return ret0
}

// BuildQuery indicates an expected call of BuildQuery.
func (mr *MockBookingRepositoryMockRecorder) BuildQuery() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "BuildQuery", reflect.TypeOf((*MockBookingRepository)(nil).BuildQuery))
}

// BuildSaveUpdateOne mocks base method.
func (m *MockBookingRepository) BuildSaveUpdateOne(ctx context.Context, update *ent.BookingUpdateOne) (*ent.Booking, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "BuildSaveUpdateOne", ctx, update)
	ret0, _ := ret[0].(*ent.Booking)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// BuildSaveUpdateOne indicates an expected call of BuildSaveUpdateOne.
func (mr *MockBookingRepositoryMockRecorder) BuildSaveUpdateOne(ctx, update interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "BuildSaveUpdateOne", reflect.TypeOf((*MockBookingRepository)(nil).BuildSaveUpdateOne), ctx, update)
}

// BuildUpdateOne mocks base method.
func (m *MockBookingRepository) BuildUpdateOne(ctx context.Context, model *ent.Booking) *ent.BookingUpdateOne {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "BuildUpdateOne", ctx, model)
	ret0, _ := ret[0].(*ent.BookingUpdateOne)
	return ret0
}

// BuildUpdateOne indicates an expected call of BuildUpdateOne.
func (mr *MockBookingRepositoryMockRecorder) BuildUpdateOne(ctx, model interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "BuildUpdateOne", reflect.TypeOf((*MockBookingRepository)(nil).BuildUpdateOne), ctx, model)
}

// CancelBooking mocks base method.
func (m *MockBookingRepository) CancelBooking(ctx context.Context, booking *ent.Booking) (*ent.Booking, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CancelBooking", ctx, booking)
	ret0, _ := ret[0].(*ent.Booking)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CancelBooking indicates an expected call of CancelBooking.
func (mr *MockBookingRepositoryMockRecorder) CancelBooking(ctx, booking interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CancelBooking", reflect.TypeOf((*MockBookingRepository)(nil).CancelBooking), ctx, booking)
}

// CheckExistingBookings mocks base method.
func (m *MockBookingRepository) CheckExistingBookings(ctx context.Context, officeID, roomID uuid.UUID, startDateTime, endDateTime time.Time, excludeBookingID *uuid.UUID) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CheckExistingBookings", ctx, officeID, roomID, startDateTime, endDateTime, excludeBookingID)
	ret0, _ := ret[0].(error)
	return ret0
}

// CheckExistingBookings indicates an expected call of CheckExistingBookings.
func (mr *MockBookingRepositoryMockRecorder) CheckExistingBookings(ctx, officeID, roomID, startDateTime, endDateTime, excludeBookingID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CheckExistingBookings", reflect.TypeOf((*MockBookingRepository)(nil).CheckExistingBookings), ctx, officeID, roomID, startDateTime, endDateTime, excludeBookingID)
}

// CreateBooking mocks base method.
func (m *MockBookingRepository) CreateBooking(ctx context.Context, input dto.CreateBookingInputDTO) (*ent.Booking, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateBooking", ctx, input)
	ret0, _ := ret[0].(*ent.Booking)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateBooking indicates an expected call of CreateBooking.
func (mr *MockBookingRepositoryMockRecorder) CreateBooking(ctx, input interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateBooking", reflect.TypeOf((*MockBookingRepository)(nil).CreateBooking), ctx, input)
}

// GetBooking mocks base method.
func (m *MockBookingRepository) GetBooking(ctx context.Context, id uuid.UUID) (*ent.Booking, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetBooking", ctx, id)
	ret0, _ := ret[0].(*ent.Booking)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetBooking indicates an expected call of GetBooking.
func (mr *MockBookingRepositoryMockRecorder) GetBooking(ctx, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetBooking", reflect.TypeOf((*MockBookingRepository)(nil).GetBooking), ctx, id)
}

// GetBookingByID mocks base method.
func (m *MockBookingRepository) GetBookingByID(ctx context.Context, id uuid.UUID) (*ent.Booking, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetBookingByID", ctx, id)
	ret0, _ := ret[0].(*ent.Booking)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetBookingByID indicates an expected call of GetBookingByID.
func (mr *MockBookingRepositoryMockRecorder) GetBookingByID(ctx, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetBookingByID", reflect.TypeOf((*MockBookingRepository)(nil).GetBookingByID), ctx, id)
}

// GetConflictingBookings mocks base method.
func (m *MockBookingRepository) GetConflictingBookings(ctx context.Context, roomID uuid.UUID, startDateTime, endDateTime time.Time) ([]*ent.Booking, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetConflictingBookings", ctx, roomID, startDateTime, endDateTime)
	ret0, _ := ret[0].([]*ent.Booking)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetConflictingBookings indicates an expected call of GetConflictingBookings.
func (mr *MockBookingRepositoryMockRecorder) GetConflictingBookings(ctx, roomID, startDateTime, endDateTime interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetConflictingBookings", reflect.TypeOf((*MockBookingRepository)(nil).GetConflictingBookings), ctx, roomID, startDateTime, endDateTime)
}

// UpdateBooking mocks base method.
func (m *MockBookingRepository) UpdateBooking(ctx context.Context, input dto.UpdateBookingInputDTO) (*ent.Booking, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateBooking", ctx, input)
	ret0, _ := ret[0].(*ent.Booking)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateBooking indicates an expected call of UpdateBooking.
func (mr *MockBookingRepositoryMockRecorder) UpdateBooking(ctx, input interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateBooking", reflect.TypeOf((*MockBookingRepository)(nil).UpdateBooking), ctx, input)
}

// ValidateBookingTitle mocks base method.
func (m *MockBookingRepository) ValidateBookingTitle(ctx context.Context, newsId uuid.UUID, title string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ValidateBookingTitle", ctx, newsId, title)
	ret0, _ := ret[0].(error)
	return ret0
}

// ValidateBookingTitle indicates an expected call of ValidateBookingTitle.
func (mr *MockBookingRepositoryMockRecorder) ValidateBookingTitle(ctx, newsId, title interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ValidateBookingTitle", reflect.TypeOf((*MockBookingRepository)(nil).ValidateBookingTitle), ctx, newsId, title)
}
