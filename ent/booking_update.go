// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/google/uuid"
	"gitlab.techvify.dev/its/internship/q2-2024/project/meeting-room-reservation/meeting-room-reservation-be/ent/booking"
	"gitlab.techvify.dev/its/internship/q2-2024/project/meeting-room-reservation/meeting-room-reservation-be/ent/office"
	"gitlab.techvify.dev/its/internship/q2-2024/project/meeting-room-reservation/meeting-room-reservation-be/ent/predicate"
	"gitlab.techvify.dev/its/internship/q2-2024/project/meeting-room-reservation/meeting-room-reservation-be/ent/room"
	"gitlab.techvify.dev/its/internship/q2-2024/project/meeting-room-reservation/meeting-room-reservation-be/ent/user"
)

// BookingUpdate is the builder for updating Booking entities.
type BookingUpdate struct {
	config
	hooks    []Hook
	mutation *BookingMutation
}

// Where appends a list predicates to the BookingUpdate builder.
func (bu *BookingUpdate) Where(ps ...predicate.Booking) *BookingUpdate {
	bu.mutation.Where(ps...)
	return bu
}

// SetUpdatedAt sets the "updated_at" field.
func (bu *BookingUpdate) SetUpdatedAt(t time.Time) *BookingUpdate {
	bu.mutation.SetUpdatedAt(t)
	return bu
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (bu *BookingUpdate) SetNillableUpdatedAt(t *time.Time) *BookingUpdate {
	if t != nil {
		bu.SetUpdatedAt(*t)
	}
	return bu
}

// ClearUpdatedAt clears the value of the "updated_at" field.
func (bu *BookingUpdate) ClearUpdatedAt() *BookingUpdate {
	bu.mutation.ClearUpdatedAt()
	return bu
}

// SetDeletedAt sets the "deleted_at" field.
func (bu *BookingUpdate) SetDeletedAt(t time.Time) *BookingUpdate {
	bu.mutation.SetDeletedAt(t)
	return bu
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (bu *BookingUpdate) SetNillableDeletedAt(t *time.Time) *BookingUpdate {
	if t != nil {
		bu.SetDeletedAt(*t)
	}
	return bu
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (bu *BookingUpdate) ClearDeletedAt() *BookingUpdate {
	bu.mutation.ClearDeletedAt()
	return bu
}

// SetSlug sets the "slug" field.
func (bu *BookingUpdate) SetSlug(s string) *BookingUpdate {
	bu.mutation.SetSlug(s)
	return bu
}

// SetNillableSlug sets the "slug" field if the given value is not nil.
func (bu *BookingUpdate) SetNillableSlug(s *string) *BookingUpdate {
	if s != nil {
		bu.SetSlug(*s)
	}
	return bu
}

// SetTitle sets the "title" field.
func (bu *BookingUpdate) SetTitle(s string) *BookingUpdate {
	bu.mutation.SetTitle(s)
	return bu
}

// SetNillableTitle sets the "title" field if the given value is not nil.
func (bu *BookingUpdate) SetNillableTitle(s *string) *BookingUpdate {
	if s != nil {
		bu.SetTitle(*s)
	}
	return bu
}

// SetStartDate sets the "start_date" field.
func (bu *BookingUpdate) SetStartDate(t time.Time) *BookingUpdate {
	bu.mutation.SetStartDate(t)
	return bu
}

// SetNillableStartDate sets the "start_date" field if the given value is not nil.
func (bu *BookingUpdate) SetNillableStartDate(t *time.Time) *BookingUpdate {
	if t != nil {
		bu.SetStartDate(*t)
	}
	return bu
}

// SetEndDate sets the "end_date" field.
func (bu *BookingUpdate) SetEndDate(t time.Time) *BookingUpdate {
	bu.mutation.SetEndDate(t)
	return bu
}

// SetNillableEndDate sets the "end_date" field if the given value is not nil.
func (bu *BookingUpdate) SetNillableEndDate(t *time.Time) *BookingUpdate {
	if t != nil {
		bu.SetEndDate(*t)
	}
	return bu
}

// SetIsRepeat sets the "is_repeat" field.
func (bu *BookingUpdate) SetIsRepeat(b bool) *BookingUpdate {
	bu.mutation.SetIsRepeat(b)
	return bu
}

// SetNillableIsRepeat sets the "is_repeat" field if the given value is not nil.
func (bu *BookingUpdate) SetNillableIsRepeat(b *bool) *BookingUpdate {
	if b != nil {
		bu.SetIsRepeat(*b)
	}
	return bu
}

// ClearIsRepeat clears the value of the "is_repeat" field.
func (bu *BookingUpdate) ClearIsRepeat() *BookingUpdate {
	bu.mutation.ClearIsRepeat()
	return bu
}

// SetUserID sets the "user_id" field.
func (bu *BookingUpdate) SetUserID(u uuid.UUID) *BookingUpdate {
	bu.mutation.SetUserID(u)
	return bu
}

// SetNillableUserID sets the "user_id" field if the given value is not nil.
func (bu *BookingUpdate) SetNillableUserID(u *uuid.UUID) *BookingUpdate {
	if u != nil {
		bu.SetUserID(*u)
	}
	return bu
}

// SetOfficeID sets the "office_id" field.
func (bu *BookingUpdate) SetOfficeID(u uuid.UUID) *BookingUpdate {
	bu.mutation.SetOfficeID(u)
	return bu
}

// SetNillableOfficeID sets the "office_id" field if the given value is not nil.
func (bu *BookingUpdate) SetNillableOfficeID(u *uuid.UUID) *BookingUpdate {
	if u != nil {
		bu.SetOfficeID(*u)
	}
	return bu
}

// SetRoomID sets the "room_id" field.
func (bu *BookingUpdate) SetRoomID(u uuid.UUID) *BookingUpdate {
	bu.mutation.SetRoomID(u)
	return bu
}

// SetNillableRoomID sets the "room_id" field if the given value is not nil.
func (bu *BookingUpdate) SetNillableRoomID(u *uuid.UUID) *BookingUpdate {
	if u != nil {
		bu.SetRoomID(*u)
	}
	return bu
}

// SetUser sets the "user" edge to the User entity.
func (bu *BookingUpdate) SetUser(u *User) *BookingUpdate {
	return bu.SetUserID(u.ID)
}

// SetOffice sets the "office" edge to the Office entity.
func (bu *BookingUpdate) SetOffice(o *Office) *BookingUpdate {
	return bu.SetOfficeID(o.ID)
}

// SetRoom sets the "room" edge to the Room entity.
func (bu *BookingUpdate) SetRoom(r *Room) *BookingUpdate {
	return bu.SetRoomID(r.ID)
}

// Mutation returns the BookingMutation object of the builder.
func (bu *BookingUpdate) Mutation() *BookingMutation {
	return bu.mutation
}

// ClearUser clears the "user" edge to the User entity.
func (bu *BookingUpdate) ClearUser() *BookingUpdate {
	bu.mutation.ClearUser()
	return bu
}

// ClearOffice clears the "office" edge to the Office entity.
func (bu *BookingUpdate) ClearOffice() *BookingUpdate {
	bu.mutation.ClearOffice()
	return bu
}

// ClearRoom clears the "room" edge to the Room entity.
func (bu *BookingUpdate) ClearRoom() *BookingUpdate {
	bu.mutation.ClearRoom()
	return bu
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (bu *BookingUpdate) Save(ctx context.Context) (int, error) {
	return withHooks(ctx, bu.sqlSave, bu.mutation, bu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (bu *BookingUpdate) SaveX(ctx context.Context) int {
	affected, err := bu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (bu *BookingUpdate) Exec(ctx context.Context) error {
	_, err := bu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (bu *BookingUpdate) ExecX(ctx context.Context) {
	if err := bu.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (bu *BookingUpdate) check() error {
	if v, ok := bu.mutation.Slug(); ok {
		if err := booking.SlugValidator(v); err != nil {
			return &ValidationError{Name: "slug", err: fmt.Errorf(`ent: validator failed for field "Booking.slug": %w`, err)}
		}
	}
	if v, ok := bu.mutation.Title(); ok {
		if err := booking.TitleValidator(v); err != nil {
			return &ValidationError{Name: "title", err: fmt.Errorf(`ent: validator failed for field "Booking.title": %w`, err)}
		}
	}
	if _, ok := bu.mutation.UserID(); bu.mutation.UserCleared() && !ok {
		return errors.New(`ent: clearing a required unique edge "Booking.user"`)
	}
	if _, ok := bu.mutation.OfficeID(); bu.mutation.OfficeCleared() && !ok {
		return errors.New(`ent: clearing a required unique edge "Booking.office"`)
	}
	if _, ok := bu.mutation.RoomID(); bu.mutation.RoomCleared() && !ok {
		return errors.New(`ent: clearing a required unique edge "Booking.room"`)
	}
	return nil
}

func (bu *BookingUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := bu.check(); err != nil {
		return n, err
	}
	_spec := sqlgraph.NewUpdateSpec(booking.Table, booking.Columns, sqlgraph.NewFieldSpec(booking.FieldID, field.TypeUUID))
	if ps := bu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := bu.mutation.UpdatedAt(); ok {
		_spec.SetField(booking.FieldUpdatedAt, field.TypeTime, value)
	}
	if bu.mutation.UpdatedAtCleared() {
		_spec.ClearField(booking.FieldUpdatedAt, field.TypeTime)
	}
	if value, ok := bu.mutation.DeletedAt(); ok {
		_spec.SetField(booking.FieldDeletedAt, field.TypeTime, value)
	}
	if bu.mutation.DeletedAtCleared() {
		_spec.ClearField(booking.FieldDeletedAt, field.TypeTime)
	}
	if value, ok := bu.mutation.Slug(); ok {
		_spec.SetField(booking.FieldSlug, field.TypeString, value)
	}
	if value, ok := bu.mutation.Title(); ok {
		_spec.SetField(booking.FieldTitle, field.TypeString, value)
	}
	if value, ok := bu.mutation.StartDate(); ok {
		_spec.SetField(booking.FieldStartDate, field.TypeTime, value)
	}
	if value, ok := bu.mutation.EndDate(); ok {
		_spec.SetField(booking.FieldEndDate, field.TypeTime, value)
	}
	if value, ok := bu.mutation.IsRepeat(); ok {
		_spec.SetField(booking.FieldIsRepeat, field.TypeBool, value)
	}
	if bu.mutation.IsRepeatCleared() {
		_spec.ClearField(booking.FieldIsRepeat, field.TypeBool)
	}
	if bu.mutation.UserCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   booking.UserTable,
			Columns: []string{booking.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := bu.mutation.UserIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   booking.UserTable,
			Columns: []string{booking.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if bu.mutation.OfficeCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   booking.OfficeTable,
			Columns: []string{booking.OfficeColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(office.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := bu.mutation.OfficeIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   booking.OfficeTable,
			Columns: []string{booking.OfficeColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(office.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if bu.mutation.RoomCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   booking.RoomTable,
			Columns: []string{booking.RoomColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(room.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := bu.mutation.RoomIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   booking.RoomTable,
			Columns: []string{booking.RoomColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(room.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, bu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{booking.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	bu.mutation.done = true
	return n, nil
}

// BookingUpdateOne is the builder for updating a single Booking entity.
type BookingUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *BookingMutation
}

// SetUpdatedAt sets the "updated_at" field.
func (buo *BookingUpdateOne) SetUpdatedAt(t time.Time) *BookingUpdateOne {
	buo.mutation.SetUpdatedAt(t)
	return buo
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (buo *BookingUpdateOne) SetNillableUpdatedAt(t *time.Time) *BookingUpdateOne {
	if t != nil {
		buo.SetUpdatedAt(*t)
	}
	return buo
}

// ClearUpdatedAt clears the value of the "updated_at" field.
func (buo *BookingUpdateOne) ClearUpdatedAt() *BookingUpdateOne {
	buo.mutation.ClearUpdatedAt()
	return buo
}

// SetDeletedAt sets the "deleted_at" field.
func (buo *BookingUpdateOne) SetDeletedAt(t time.Time) *BookingUpdateOne {
	buo.mutation.SetDeletedAt(t)
	return buo
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (buo *BookingUpdateOne) SetNillableDeletedAt(t *time.Time) *BookingUpdateOne {
	if t != nil {
		buo.SetDeletedAt(*t)
	}
	return buo
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (buo *BookingUpdateOne) ClearDeletedAt() *BookingUpdateOne {
	buo.mutation.ClearDeletedAt()
	return buo
}

// SetSlug sets the "slug" field.
func (buo *BookingUpdateOne) SetSlug(s string) *BookingUpdateOne {
	buo.mutation.SetSlug(s)
	return buo
}

// SetNillableSlug sets the "slug" field if the given value is not nil.
func (buo *BookingUpdateOne) SetNillableSlug(s *string) *BookingUpdateOne {
	if s != nil {
		buo.SetSlug(*s)
	}
	return buo
}

// SetTitle sets the "title" field.
func (buo *BookingUpdateOne) SetTitle(s string) *BookingUpdateOne {
	buo.mutation.SetTitle(s)
	return buo
}

// SetNillableTitle sets the "title" field if the given value is not nil.
func (buo *BookingUpdateOne) SetNillableTitle(s *string) *BookingUpdateOne {
	if s != nil {
		buo.SetTitle(*s)
	}
	return buo
}

// SetStartDate sets the "start_date" field.
func (buo *BookingUpdateOne) SetStartDate(t time.Time) *BookingUpdateOne {
	buo.mutation.SetStartDate(t)
	return buo
}

// SetNillableStartDate sets the "start_date" field if the given value is not nil.
func (buo *BookingUpdateOne) SetNillableStartDate(t *time.Time) *BookingUpdateOne {
	if t != nil {
		buo.SetStartDate(*t)
	}
	return buo
}

// SetEndDate sets the "end_date" field.
func (buo *BookingUpdateOne) SetEndDate(t time.Time) *BookingUpdateOne {
	buo.mutation.SetEndDate(t)
	return buo
}

// SetNillableEndDate sets the "end_date" field if the given value is not nil.
func (buo *BookingUpdateOne) SetNillableEndDate(t *time.Time) *BookingUpdateOne {
	if t != nil {
		buo.SetEndDate(*t)
	}
	return buo
}

// SetIsRepeat sets the "is_repeat" field.
func (buo *BookingUpdateOne) SetIsRepeat(b bool) *BookingUpdateOne {
	buo.mutation.SetIsRepeat(b)
	return buo
}

// SetNillableIsRepeat sets the "is_repeat" field if the given value is not nil.
func (buo *BookingUpdateOne) SetNillableIsRepeat(b *bool) *BookingUpdateOne {
	if b != nil {
		buo.SetIsRepeat(*b)
	}
	return buo
}

// ClearIsRepeat clears the value of the "is_repeat" field.
func (buo *BookingUpdateOne) ClearIsRepeat() *BookingUpdateOne {
	buo.mutation.ClearIsRepeat()
	return buo
}

// SetUserID sets the "user_id" field.
func (buo *BookingUpdateOne) SetUserID(u uuid.UUID) *BookingUpdateOne {
	buo.mutation.SetUserID(u)
	return buo
}

// SetNillableUserID sets the "user_id" field if the given value is not nil.
func (buo *BookingUpdateOne) SetNillableUserID(u *uuid.UUID) *BookingUpdateOne {
	if u != nil {
		buo.SetUserID(*u)
	}
	return buo
}

// SetOfficeID sets the "office_id" field.
func (buo *BookingUpdateOne) SetOfficeID(u uuid.UUID) *BookingUpdateOne {
	buo.mutation.SetOfficeID(u)
	return buo
}

// SetNillableOfficeID sets the "office_id" field if the given value is not nil.
func (buo *BookingUpdateOne) SetNillableOfficeID(u *uuid.UUID) *BookingUpdateOne {
	if u != nil {
		buo.SetOfficeID(*u)
	}
	return buo
}

// SetRoomID sets the "room_id" field.
func (buo *BookingUpdateOne) SetRoomID(u uuid.UUID) *BookingUpdateOne {
	buo.mutation.SetRoomID(u)
	return buo
}

// SetNillableRoomID sets the "room_id" field if the given value is not nil.
func (buo *BookingUpdateOne) SetNillableRoomID(u *uuid.UUID) *BookingUpdateOne {
	if u != nil {
		buo.SetRoomID(*u)
	}
	return buo
}

// SetUser sets the "user" edge to the User entity.
func (buo *BookingUpdateOne) SetUser(u *User) *BookingUpdateOne {
	return buo.SetUserID(u.ID)
}

// SetOffice sets the "office" edge to the Office entity.
func (buo *BookingUpdateOne) SetOffice(o *Office) *BookingUpdateOne {
	return buo.SetOfficeID(o.ID)
}

// SetRoom sets the "room" edge to the Room entity.
func (buo *BookingUpdateOne) SetRoom(r *Room) *BookingUpdateOne {
	return buo.SetRoomID(r.ID)
}

// Mutation returns the BookingMutation object of the builder.
func (buo *BookingUpdateOne) Mutation() *BookingMutation {
	return buo.mutation
}

// ClearUser clears the "user" edge to the User entity.
func (buo *BookingUpdateOne) ClearUser() *BookingUpdateOne {
	buo.mutation.ClearUser()
	return buo
}

// ClearOffice clears the "office" edge to the Office entity.
func (buo *BookingUpdateOne) ClearOffice() *BookingUpdateOne {
	buo.mutation.ClearOffice()
	return buo
}

// ClearRoom clears the "room" edge to the Room entity.
func (buo *BookingUpdateOne) ClearRoom() *BookingUpdateOne {
	buo.mutation.ClearRoom()
	return buo
}

// Where appends a list predicates to the BookingUpdate builder.
func (buo *BookingUpdateOne) Where(ps ...predicate.Booking) *BookingUpdateOne {
	buo.mutation.Where(ps...)
	return buo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (buo *BookingUpdateOne) Select(field string, fields ...string) *BookingUpdateOne {
	buo.fields = append([]string{field}, fields...)
	return buo
}

// Save executes the query and returns the updated Booking entity.
func (buo *BookingUpdateOne) Save(ctx context.Context) (*Booking, error) {
	return withHooks(ctx, buo.sqlSave, buo.mutation, buo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (buo *BookingUpdateOne) SaveX(ctx context.Context) *Booking {
	node, err := buo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (buo *BookingUpdateOne) Exec(ctx context.Context) error {
	_, err := buo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (buo *BookingUpdateOne) ExecX(ctx context.Context) {
	if err := buo.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (buo *BookingUpdateOne) check() error {
	if v, ok := buo.mutation.Slug(); ok {
		if err := booking.SlugValidator(v); err != nil {
			return &ValidationError{Name: "slug", err: fmt.Errorf(`ent: validator failed for field "Booking.slug": %w`, err)}
		}
	}
	if v, ok := buo.mutation.Title(); ok {
		if err := booking.TitleValidator(v); err != nil {
			return &ValidationError{Name: "title", err: fmt.Errorf(`ent: validator failed for field "Booking.title": %w`, err)}
		}
	}
	if _, ok := buo.mutation.UserID(); buo.mutation.UserCleared() && !ok {
		return errors.New(`ent: clearing a required unique edge "Booking.user"`)
	}
	if _, ok := buo.mutation.OfficeID(); buo.mutation.OfficeCleared() && !ok {
		return errors.New(`ent: clearing a required unique edge "Booking.office"`)
	}
	if _, ok := buo.mutation.RoomID(); buo.mutation.RoomCleared() && !ok {
		return errors.New(`ent: clearing a required unique edge "Booking.room"`)
	}
	return nil
}

func (buo *BookingUpdateOne) sqlSave(ctx context.Context) (_node *Booking, err error) {
	if err := buo.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(booking.Table, booking.Columns, sqlgraph.NewFieldSpec(booking.FieldID, field.TypeUUID))
	id, ok := buo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "Booking.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := buo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, booking.FieldID)
		for _, f := range fields {
			if !booking.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != booking.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := buo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := buo.mutation.UpdatedAt(); ok {
		_spec.SetField(booking.FieldUpdatedAt, field.TypeTime, value)
	}
	if buo.mutation.UpdatedAtCleared() {
		_spec.ClearField(booking.FieldUpdatedAt, field.TypeTime)
	}
	if value, ok := buo.mutation.DeletedAt(); ok {
		_spec.SetField(booking.FieldDeletedAt, field.TypeTime, value)
	}
	if buo.mutation.DeletedAtCleared() {
		_spec.ClearField(booking.FieldDeletedAt, field.TypeTime)
	}
	if value, ok := buo.mutation.Slug(); ok {
		_spec.SetField(booking.FieldSlug, field.TypeString, value)
	}
	if value, ok := buo.mutation.Title(); ok {
		_spec.SetField(booking.FieldTitle, field.TypeString, value)
	}
	if value, ok := buo.mutation.StartDate(); ok {
		_spec.SetField(booking.FieldStartDate, field.TypeTime, value)
	}
	if value, ok := buo.mutation.EndDate(); ok {
		_spec.SetField(booking.FieldEndDate, field.TypeTime, value)
	}
	if value, ok := buo.mutation.IsRepeat(); ok {
		_spec.SetField(booking.FieldIsRepeat, field.TypeBool, value)
	}
	if buo.mutation.IsRepeatCleared() {
		_spec.ClearField(booking.FieldIsRepeat, field.TypeBool)
	}
	if buo.mutation.UserCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   booking.UserTable,
			Columns: []string{booking.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := buo.mutation.UserIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   booking.UserTable,
			Columns: []string{booking.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if buo.mutation.OfficeCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   booking.OfficeTable,
			Columns: []string{booking.OfficeColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(office.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := buo.mutation.OfficeIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   booking.OfficeTable,
			Columns: []string{booking.OfficeColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(office.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if buo.mutation.RoomCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   booking.RoomTable,
			Columns: []string{booking.RoomColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(room.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := buo.mutation.RoomIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   booking.RoomTable,
			Columns: []string{booking.RoomColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(room.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &Booking{config: buo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, buo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{booking.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	buo.mutation.done = true
	return _node, nil
}
