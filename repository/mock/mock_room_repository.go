// Code generated by MockGen. DO NOT EDIT.
// Source: repository/room.repository.go

// Package mock is a generated GoMock package.
package mock

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	uuid "github.com/google/uuid"
	ent "gitlab.techvify.dev/its/internship/q2-2024/project/meeting-room-reservation/meeting-room-reservation-be/ent"
)

// MockRoomRepository is a mock of RoomRepository interface.
type MockRoomRepository struct {
	ctrl     *gomock.Controller
	recorder *MockRoomRepositoryMockRecorder
}

// MockRoomRepositoryMockRecorder is the mock recorder for MockRoomRepository.
type MockRoomRepositoryMockRecorder struct {
	mock *MockRoomRepository
}

// NewMockRoomRepository creates a new mock instance.
func NewMockRoomRepository(ctrl *gomock.Controller) *MockRoomRepository {
	mock := &MockRoomRepository{ctrl: ctrl}
	mock.recorder = &MockRoomRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockRoomRepository) EXPECT() *MockRoomRepositoryMockRecorder {
	return m.recorder
}

// BuildCount mocks base method.
func (m *MockRoomRepository) BuildCount(ctx context.Context, query *ent.RoomQuery) (int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "BuildCount", ctx, query)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// BuildCount indicates an expected call of BuildCount.
func (mr *MockRoomRepositoryMockRecorder) BuildCount(ctx, query interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "BuildCount", reflect.TypeOf((*MockRoomRepository)(nil).BuildCount), ctx, query)
}

// BuildGet mocks base method.
func (m *MockRoomRepository) BuildGet(ctx context.Context, query *ent.RoomQuery) (*ent.Room, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "BuildGet", ctx, query)
	ret0, _ := ret[0].(*ent.Room)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// BuildGet indicates an expected call of BuildGet.
func (mr *MockRoomRepositoryMockRecorder) BuildGet(ctx, query interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "BuildGet", reflect.TypeOf((*MockRoomRepository)(nil).BuildGet), ctx, query)
}

// BuildList mocks base method.
func (m *MockRoomRepository) BuildList(ctx context.Context, query *ent.RoomQuery) ([]*ent.Room, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "BuildList", ctx, query)
	ret0, _ := ret[0].([]*ent.Room)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// BuildList indicates an expected call of BuildList.
func (mr *MockRoomRepositoryMockRecorder) BuildList(ctx, query interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "BuildList", reflect.TypeOf((*MockRoomRepository)(nil).BuildList), ctx, query)
}

// BuildQuery mocks base method.
func (m *MockRoomRepository) BuildQuery() *ent.RoomQuery {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "BuildQuery")
	ret0, _ := ret[0].(*ent.RoomQuery)
	return ret0
}

// BuildQuery indicates an expected call of BuildQuery.
func (mr *MockRoomRepositoryMockRecorder) BuildQuery() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "BuildQuery", reflect.TypeOf((*MockRoomRepository)(nil).BuildQuery))
}

// CreateRoom mocks base method.
func (m *MockRoomRepository) CreateRoom(ctx context.Context, input ent.CreateRoomInput) (*ent.Room, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateRoom", ctx, input)
	ret0, _ := ret[0].(*ent.Room)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateRoom indicates an expected call of CreateRoom.
func (mr *MockRoomRepositoryMockRecorder) CreateRoom(ctx, input interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateRoom", reflect.TypeOf((*MockRoomRepository)(nil).CreateRoom), ctx, input)
}

// DeleteRoom mocks base method.
func (m *MockRoomRepository) DeleteRoom(ctx context.Context, id uuid.UUID) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteRoom", ctx, id)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteRoom indicates an expected call of DeleteRoom.
func (mr *MockRoomRepositoryMockRecorder) DeleteRoom(ctx, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteRoom", reflect.TypeOf((*MockRoomRepository)(nil).DeleteRoom), ctx, id)
}

// GetRoom mocks base method.
func (m *MockRoomRepository) GetRoom(ctx context.Context, id uuid.UUID) (*ent.Room, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetRoom", ctx, id)
	ret0, _ := ret[0].(*ent.Room)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetRoom indicates an expected call of GetRoom.
func (mr *MockRoomRepositoryMockRecorder) GetRoom(ctx, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetRoom", reflect.TypeOf((*MockRoomRepository)(nil).GetRoom), ctx, id)
}

// GetRoomsByOfficeId mocks base method.
func (m *MockRoomRepository) GetRoomsByOfficeId(ctx context.Context, filter ent.RoomFilter) ([]*ent.Room, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetRoomsByOfficeId", ctx, filter)
	ret0, _ := ret[0].([]*ent.Room)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetRoomsByOfficeId indicates an expected call of GetRoomsByOfficeId.
func (mr *MockRoomRepositoryMockRecorder) GetRoomsByOfficeId(ctx, filter interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetRoomsByOfficeId", reflect.TypeOf((*MockRoomRepository)(nil).GetRoomsByOfficeId), ctx, filter)
}

// UpdateRoom mocks base method.
func (m *MockRoomRepository) UpdateRoom(ctx context.Context, input ent.UpdateRoomInput) (*ent.Room, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateRoom", ctx, input)
	ret0, _ := ret[0].(*ent.Room)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateRoom indicates an expected call of UpdateRoom.
func (mr *MockRoomRepositoryMockRecorder) UpdateRoom(ctx, input interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateRoom", reflect.TypeOf((*MockRoomRepository)(nil).UpdateRoom), ctx, input)
}
