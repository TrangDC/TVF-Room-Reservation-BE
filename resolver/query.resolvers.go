package resolver

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.48

import (
	"context"
	"net/http"

	"github.com/google/uuid"
	"gitlab.techvify.dev/its/internship/q2-2024/project/meeting-room-reservation/meeting-room-reservation-be/ent"
	graphql1 "gitlab.techvify.dev/its/internship/q2-2024/project/meeting-room-reservation/meeting-room-reservation-be/graphql"
	"gitlab.techvify.dev/its/internship/q2-2024/project/meeting-room-reservation/meeting-room-reservation-be/internal/util"
)

// GetOffices is the resolver for the GetOffices field.
func (r *queryResolver) GetOffices(ctx context.Context) ([]*ent.OfficeDto, error) {
	offices, err := r.serviceRegistry.Office().GetOffices(ctx)
	if err != nil {
		return nil, err
	}
	return offices, nil
}

// GetOffice is the resolver for the GetOffice field.
func (r *queryResolver) GetOffice(ctx context.Context, officeID string) (*ent.OfficeDto, error) {
	id, err := uuid.Parse(officeID)
	if err != nil {
		return nil, util.WrapGQLError(ctx, "failed to parse office id", http.StatusConflict, util.ErrorFlagValidateFail)
	}
	office, _ := r.serviceRegistry.Office().GetOffice(ctx, id)
	return office, nil
}

// GetRooms is the resolver for the GetRooms field.
func (r *queryResolver) GetRooms(ctx context.Context, pagination *ent.PaginationInput, filter ent.RoomFilter) (*ent.RoomDataResponse, error) {
	return r.serviceRegistry.Room().GetRooms(ctx, pagination, &filter)
}

// GetRoom is the resolver for the GetRoom field.
func (r *queryResolver) GetRoom(ctx context.Context, roomID string) (*ent.Room, error) {
	id, err := uuid.Parse(roomID)
	if err != nil {
		return nil, err
	}
	return r.serviceRegistry.Room().GetRoom(ctx, id)
}

// GetAvailableRooms is the resolver for the GetAvailableRooms field.
func (r *queryResolver) GetAvailableRooms(ctx context.Context, input ent.GetAvailableRoomInput) ([]*ent.AvailableRoomResponse, error) {
	return r.serviceRegistry.Room().GetAvailableRooms(ctx, input)
}

// GetBookings is the resolver for the GetBookings field.
func (r *queryResolver) GetBookings(ctx context.Context, pagination *ent.PaginationInput, filter *ent.BookingFilter) (*ent.BookingDataResponse, error) {
	return r.serviceRegistry.Booking().GetBookings(ctx, pagination, filter)
}

// GetBooking is the resolver for the GetBooking field.
func (r *queryResolver) GetBooking(ctx context.Context, bookingID string) (*ent.BookingData, error) {
	id, err := uuid.Parse(bookingID)
	if err != nil {
		return nil, util.WrapGQLError(ctx, "failed to parse booking id", http.StatusConflict, util.ErrorFlagValidateFail)
	}
	return r.serviceRegistry.Booking().GetBooking(ctx, id)
}

// GetUserByOid is the resolver for the GetUserByOID field.
func (r *queryResolver) GetUserByOid(ctx context.Context, oID string) (*ent.UserData, error) {
	userOID, err := uuid.Parse(oID)
	if err != nil {
		return nil, util.WrapGQLError(ctx, "failed to parse user oid", http.StatusConflict, util.ErrorFlagValidateFail)
	}
	return r.serviceRegistry.User().GetUserByOID(ctx, userOID)
}

// GetAdminUsers is the resolver for the GetAdminUsers field.
func (r *queryResolver) GetAdminUsers(ctx context.Context, pagination *ent.PaginationInput, keyword *string) (*ent.UserDataResponse, error) {
	return r.serviceRegistry.User().GetAdminUsers(ctx, pagination, keyword)
}

// GetRoles is the resolver for the GetRoles field.
func (r *queryResolver) GetRoles(ctx context.Context) ([]*ent.Role, error) {
	return r.serviceRegistry.Role().GetRoles(ctx)
}

// GetRole is the resolver for the GetRole field.
func (r *queryResolver) GetRole(ctx context.Context, roleID string) (*ent.Role, error) {
	id, err := uuid.Parse(roleID)
	if err != nil {
		return nil, util.WrapGQLError(ctx, "failed to parse role id", http.StatusConflict, util.ErrorFlagValidateFail)
	}
	return r.serviceRegistry.Role().GetRole(ctx, id)
}

// Query returns graphql1.QueryResolver implementation.
func (r *Resolver) Query() graphql1.QueryResolver { return &queryResolver{r} }

type queryResolver struct{ *Resolver }
