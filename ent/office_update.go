// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/google/uuid"
	"gitlab.techvify.dev/its/internship/q2-2024/project/meeting-room-reservation/meeting-room-reservation-be/ent/booking"
	"gitlab.techvify.dev/its/internship/q2-2024/project/meeting-room-reservation/meeting-room-reservation-be/ent/office"
	"gitlab.techvify.dev/its/internship/q2-2024/project/meeting-room-reservation/meeting-room-reservation-be/ent/predicate"
	"gitlab.techvify.dev/its/internship/q2-2024/project/meeting-room-reservation/meeting-room-reservation-be/ent/room"
)

// OfficeUpdate is the builder for updating Office entities.
type OfficeUpdate struct {
	config
	hooks    []Hook
	mutation *OfficeMutation
}

// Where appends a list predicates to the OfficeUpdate builder.
func (ou *OfficeUpdate) Where(ps ...predicate.Office) *OfficeUpdate {
	ou.mutation.Where(ps...)
	return ou
}

// SetName sets the "name" field.
func (ou *OfficeUpdate) SetName(s string) *OfficeUpdate {
	ou.mutation.SetName(s)
	return ou
}

// SetNillableName sets the "name" field if the given value is not nil.
func (ou *OfficeUpdate) SetNillableName(s *string) *OfficeUpdate {
	if s != nil {
		ou.SetName(*s)
	}
	return ou
}

// SetDescription sets the "description" field.
func (ou *OfficeUpdate) SetDescription(s string) *OfficeUpdate {
	ou.mutation.SetDescription(s)
	return ou
}

// SetNillableDescription sets the "description" field if the given value is not nil.
func (ou *OfficeUpdate) SetNillableDescription(s *string) *OfficeUpdate {
	if s != nil {
		ou.SetDescription(*s)
	}
	return ou
}

// ClearDescription clears the value of the "description" field.
func (ou *OfficeUpdate) ClearDescription() *OfficeUpdate {
	ou.mutation.ClearDescription()
	return ou
}

// AddRoomIDs adds the "rooms" edge to the Room entity by IDs.
func (ou *OfficeUpdate) AddRoomIDs(ids ...uuid.UUID) *OfficeUpdate {
	ou.mutation.AddRoomIDs(ids...)
	return ou
}

// AddRooms adds the "rooms" edges to the Room entity.
func (ou *OfficeUpdate) AddRooms(r ...*Room) *OfficeUpdate {
	ids := make([]uuid.UUID, len(r))
	for i := range r {
		ids[i] = r[i].ID
	}
	return ou.AddRoomIDs(ids...)
}

// AddBookingIDs adds the "bookings" edge to the Booking entity by IDs.
func (ou *OfficeUpdate) AddBookingIDs(ids ...uuid.UUID) *OfficeUpdate {
	ou.mutation.AddBookingIDs(ids...)
	return ou
}

// AddBookings adds the "bookings" edges to the Booking entity.
func (ou *OfficeUpdate) AddBookings(b ...*Booking) *OfficeUpdate {
	ids := make([]uuid.UUID, len(b))
	for i := range b {
		ids[i] = b[i].ID
	}
	return ou.AddBookingIDs(ids...)
}

// Mutation returns the OfficeMutation object of the builder.
func (ou *OfficeUpdate) Mutation() *OfficeMutation {
	return ou.mutation
}

// ClearRooms clears all "rooms" edges to the Room entity.
func (ou *OfficeUpdate) ClearRooms() *OfficeUpdate {
	ou.mutation.ClearRooms()
	return ou
}

// RemoveRoomIDs removes the "rooms" edge to Room entities by IDs.
func (ou *OfficeUpdate) RemoveRoomIDs(ids ...uuid.UUID) *OfficeUpdate {
	ou.mutation.RemoveRoomIDs(ids...)
	return ou
}

// RemoveRooms removes "rooms" edges to Room entities.
func (ou *OfficeUpdate) RemoveRooms(r ...*Room) *OfficeUpdate {
	ids := make([]uuid.UUID, len(r))
	for i := range r {
		ids[i] = r[i].ID
	}
	return ou.RemoveRoomIDs(ids...)
}

// ClearBookings clears all "bookings" edges to the Booking entity.
func (ou *OfficeUpdate) ClearBookings() *OfficeUpdate {
	ou.mutation.ClearBookings()
	return ou
}

// RemoveBookingIDs removes the "bookings" edge to Booking entities by IDs.
func (ou *OfficeUpdate) RemoveBookingIDs(ids ...uuid.UUID) *OfficeUpdate {
	ou.mutation.RemoveBookingIDs(ids...)
	return ou
}

// RemoveBookings removes "bookings" edges to Booking entities.
func (ou *OfficeUpdate) RemoveBookings(b ...*Booking) *OfficeUpdate {
	ids := make([]uuid.UUID, len(b))
	for i := range b {
		ids[i] = b[i].ID
	}
	return ou.RemoveBookingIDs(ids...)
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (ou *OfficeUpdate) Save(ctx context.Context) (int, error) {
	return withHooks(ctx, ou.sqlSave, ou.mutation, ou.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (ou *OfficeUpdate) SaveX(ctx context.Context) int {
	affected, err := ou.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (ou *OfficeUpdate) Exec(ctx context.Context) error {
	_, err := ou.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ou *OfficeUpdate) ExecX(ctx context.Context) {
	if err := ou.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (ou *OfficeUpdate) check() error {
	if v, ok := ou.mutation.Name(); ok {
		if err := office.NameValidator(v); err != nil {
			return &ValidationError{Name: "name", err: fmt.Errorf(`ent: validator failed for field "Office.name": %w`, err)}
		}
	}
	return nil
}

func (ou *OfficeUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := ou.check(); err != nil {
		return n, err
	}
	_spec := sqlgraph.NewUpdateSpec(office.Table, office.Columns, sqlgraph.NewFieldSpec(office.FieldID, field.TypeUUID))
	if ps := ou.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := ou.mutation.Name(); ok {
		_spec.SetField(office.FieldName, field.TypeString, value)
	}
	if value, ok := ou.mutation.Description(); ok {
		_spec.SetField(office.FieldDescription, field.TypeString, value)
	}
	if ou.mutation.DescriptionCleared() {
		_spec.ClearField(office.FieldDescription, field.TypeString)
	}
	if ou.mutation.RoomsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   office.RoomsTable,
			Columns: []string{office.RoomsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(room.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ou.mutation.RemovedRoomsIDs(); len(nodes) > 0 && !ou.mutation.RoomsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   office.RoomsTable,
			Columns: []string{office.RoomsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(room.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ou.mutation.RoomsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   office.RoomsTable,
			Columns: []string{office.RoomsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(room.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if ou.mutation.BookingsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   office.BookingsTable,
			Columns: []string{office.BookingsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(booking.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ou.mutation.RemovedBookingsIDs(); len(nodes) > 0 && !ou.mutation.BookingsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   office.BookingsTable,
			Columns: []string{office.BookingsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(booking.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ou.mutation.BookingsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   office.BookingsTable,
			Columns: []string{office.BookingsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(booking.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, ou.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{office.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	ou.mutation.done = true
	return n, nil
}

// OfficeUpdateOne is the builder for updating a single Office entity.
type OfficeUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *OfficeMutation
}

// SetName sets the "name" field.
func (ouo *OfficeUpdateOne) SetName(s string) *OfficeUpdateOne {
	ouo.mutation.SetName(s)
	return ouo
}

// SetNillableName sets the "name" field if the given value is not nil.
func (ouo *OfficeUpdateOne) SetNillableName(s *string) *OfficeUpdateOne {
	if s != nil {
		ouo.SetName(*s)
	}
	return ouo
}

// SetDescription sets the "description" field.
func (ouo *OfficeUpdateOne) SetDescription(s string) *OfficeUpdateOne {
	ouo.mutation.SetDescription(s)
	return ouo
}

// SetNillableDescription sets the "description" field if the given value is not nil.
func (ouo *OfficeUpdateOne) SetNillableDescription(s *string) *OfficeUpdateOne {
	if s != nil {
		ouo.SetDescription(*s)
	}
	return ouo
}

// ClearDescription clears the value of the "description" field.
func (ouo *OfficeUpdateOne) ClearDescription() *OfficeUpdateOne {
	ouo.mutation.ClearDescription()
	return ouo
}

// AddRoomIDs adds the "rooms" edge to the Room entity by IDs.
func (ouo *OfficeUpdateOne) AddRoomIDs(ids ...uuid.UUID) *OfficeUpdateOne {
	ouo.mutation.AddRoomIDs(ids...)
	return ouo
}

// AddRooms adds the "rooms" edges to the Room entity.
func (ouo *OfficeUpdateOne) AddRooms(r ...*Room) *OfficeUpdateOne {
	ids := make([]uuid.UUID, len(r))
	for i := range r {
		ids[i] = r[i].ID
	}
	return ouo.AddRoomIDs(ids...)
}

// AddBookingIDs adds the "bookings" edge to the Booking entity by IDs.
func (ouo *OfficeUpdateOne) AddBookingIDs(ids ...uuid.UUID) *OfficeUpdateOne {
	ouo.mutation.AddBookingIDs(ids...)
	return ouo
}

// AddBookings adds the "bookings" edges to the Booking entity.
func (ouo *OfficeUpdateOne) AddBookings(b ...*Booking) *OfficeUpdateOne {
	ids := make([]uuid.UUID, len(b))
	for i := range b {
		ids[i] = b[i].ID
	}
	return ouo.AddBookingIDs(ids...)
}

// Mutation returns the OfficeMutation object of the builder.
func (ouo *OfficeUpdateOne) Mutation() *OfficeMutation {
	return ouo.mutation
}

// ClearRooms clears all "rooms" edges to the Room entity.
func (ouo *OfficeUpdateOne) ClearRooms() *OfficeUpdateOne {
	ouo.mutation.ClearRooms()
	return ouo
}

// RemoveRoomIDs removes the "rooms" edge to Room entities by IDs.
func (ouo *OfficeUpdateOne) RemoveRoomIDs(ids ...uuid.UUID) *OfficeUpdateOne {
	ouo.mutation.RemoveRoomIDs(ids...)
	return ouo
}

// RemoveRooms removes "rooms" edges to Room entities.
func (ouo *OfficeUpdateOne) RemoveRooms(r ...*Room) *OfficeUpdateOne {
	ids := make([]uuid.UUID, len(r))
	for i := range r {
		ids[i] = r[i].ID
	}
	return ouo.RemoveRoomIDs(ids...)
}

// ClearBookings clears all "bookings" edges to the Booking entity.
func (ouo *OfficeUpdateOne) ClearBookings() *OfficeUpdateOne {
	ouo.mutation.ClearBookings()
	return ouo
}

// RemoveBookingIDs removes the "bookings" edge to Booking entities by IDs.
func (ouo *OfficeUpdateOne) RemoveBookingIDs(ids ...uuid.UUID) *OfficeUpdateOne {
	ouo.mutation.RemoveBookingIDs(ids...)
	return ouo
}

// RemoveBookings removes "bookings" edges to Booking entities.
func (ouo *OfficeUpdateOne) RemoveBookings(b ...*Booking) *OfficeUpdateOne {
	ids := make([]uuid.UUID, len(b))
	for i := range b {
		ids[i] = b[i].ID
	}
	return ouo.RemoveBookingIDs(ids...)
}

// Where appends a list predicates to the OfficeUpdate builder.
func (ouo *OfficeUpdateOne) Where(ps ...predicate.Office) *OfficeUpdateOne {
	ouo.mutation.Where(ps...)
	return ouo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (ouo *OfficeUpdateOne) Select(field string, fields ...string) *OfficeUpdateOne {
	ouo.fields = append([]string{field}, fields...)
	return ouo
}

// Save executes the query and returns the updated Office entity.
func (ouo *OfficeUpdateOne) Save(ctx context.Context) (*Office, error) {
	return withHooks(ctx, ouo.sqlSave, ouo.mutation, ouo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (ouo *OfficeUpdateOne) SaveX(ctx context.Context) *Office {
	node, err := ouo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (ouo *OfficeUpdateOne) Exec(ctx context.Context) error {
	_, err := ouo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ouo *OfficeUpdateOne) ExecX(ctx context.Context) {
	if err := ouo.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (ouo *OfficeUpdateOne) check() error {
	if v, ok := ouo.mutation.Name(); ok {
		if err := office.NameValidator(v); err != nil {
			return &ValidationError{Name: "name", err: fmt.Errorf(`ent: validator failed for field "Office.name": %w`, err)}
		}
	}
	return nil
}

func (ouo *OfficeUpdateOne) sqlSave(ctx context.Context) (_node *Office, err error) {
	if err := ouo.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(office.Table, office.Columns, sqlgraph.NewFieldSpec(office.FieldID, field.TypeUUID))
	id, ok := ouo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "Office.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := ouo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, office.FieldID)
		for _, f := range fields {
			if !office.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != office.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := ouo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := ouo.mutation.Name(); ok {
		_spec.SetField(office.FieldName, field.TypeString, value)
	}
	if value, ok := ouo.mutation.Description(); ok {
		_spec.SetField(office.FieldDescription, field.TypeString, value)
	}
	if ouo.mutation.DescriptionCleared() {
		_spec.ClearField(office.FieldDescription, field.TypeString)
	}
	if ouo.mutation.RoomsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   office.RoomsTable,
			Columns: []string{office.RoomsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(room.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ouo.mutation.RemovedRoomsIDs(); len(nodes) > 0 && !ouo.mutation.RoomsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   office.RoomsTable,
			Columns: []string{office.RoomsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(room.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ouo.mutation.RoomsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   office.RoomsTable,
			Columns: []string{office.RoomsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(room.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if ouo.mutation.BookingsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   office.BookingsTable,
			Columns: []string{office.BookingsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(booking.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ouo.mutation.RemovedBookingsIDs(); len(nodes) > 0 && !ouo.mutation.BookingsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   office.BookingsTable,
			Columns: []string{office.BookingsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(booking.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ouo.mutation.BookingsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   office.BookingsTable,
			Columns: []string{office.BookingsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(booking.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &Office{config: ouo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, ouo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{office.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	ouo.mutation.done = true
	return _node, nil
}
