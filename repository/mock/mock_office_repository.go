// Code generated by MockGen. DO NOT EDIT.
// Source: repository/office.repository.go

// Package mock is a generated GoMock package.
package mock

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	uuid "github.com/google/uuid"
	ent "gitlab.techvify.dev/its/internship/q2-2024/project/meeting-room-reservation/meeting-room-reservation-be/ent"
)

// MockOfficeRepository is a mock of OfficeRepository interface.
type MockOfficeRepository struct {
	ctrl     *gomock.Controller
	recorder *MockOfficeRepositoryMockRecorder
}

// MockOfficeRepositoryMockRecorder is the mock recorder for MockOfficeRepository.
type MockOfficeRepositoryMockRecorder struct {
	mock *MockOfficeRepository
}

// NewMockOfficeRepository creates a new mock instance.
func NewMockOfficeRepository(ctrl *gomock.Controller) *MockOfficeRepository {
	mock := &MockOfficeRepository{ctrl: ctrl}
	mock.recorder = &MockOfficeRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockOfficeRepository) EXPECT() *MockOfficeRepositoryMockRecorder {
	return m.recorder
}

// CreateOffice mocks base method.
func (m *MockOfficeRepository) CreateOffice(ctx context.Context, input ent.CreateOfficeInput) (*ent.Office, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateOffice", ctx, input)
	ret0, _ := ret[0].(*ent.Office)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateOffice indicates an expected call of CreateOffice.
func (mr *MockOfficeRepositoryMockRecorder) CreateOffice(ctx, input interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateOffice", reflect.TypeOf((*MockOfficeRepository)(nil).CreateOffice), ctx, input)
}

// DeleteOffice mocks base method.
func (m *MockOfficeRepository) DeleteOffice(ctx context.Context, id uuid.UUID) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteOffice", ctx, id)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteOffice indicates an expected call of DeleteOffice.
func (mr *MockOfficeRepositoryMockRecorder) DeleteOffice(ctx, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteOffice", reflect.TypeOf((*MockOfficeRepository)(nil).DeleteOffice), ctx, id)
}

// GetOffice mocks base method.
func (m *MockOfficeRepository) GetOffice(ctx context.Context, id uuid.UUID) (*ent.Office, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetOffice", ctx, id)
	ret0, _ := ret[0].(*ent.Office)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetOffice indicates an expected call of GetOffice.
func (mr *MockOfficeRepositoryMockRecorder) GetOffice(ctx, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetOffice", reflect.TypeOf((*MockOfficeRepository)(nil).GetOffice), ctx, id)
}

// GetOffices mocks base method.
func (m *MockOfficeRepository) GetOffices(ctx context.Context) ([]*ent.Office, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetOffices", ctx)
	ret0, _ := ret[0].([]*ent.Office)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetOffices indicates an expected call of GetOffices.
func (mr *MockOfficeRepositoryMockRecorder) GetOffices(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetOffices", reflect.TypeOf((*MockOfficeRepository)(nil).GetOffices), ctx)
}

// UpdateOffice mocks base method.
func (m *MockOfficeRepository) UpdateOffice(ctx context.Context, input ent.UpdateOfficeInput) (*ent.Office, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateOffice", ctx, input)
	ret0, _ := ret[0].(*ent.Office)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateOffice indicates an expected call of UpdateOffice.
func (mr *MockOfficeRepositoryMockRecorder) UpdateOffice(ctx, input interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateOffice", reflect.TypeOf((*MockOfficeRepository)(nil).UpdateOffice), ctx, input)
}
