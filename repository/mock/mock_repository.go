// Code generated by MockGen. DO NOT EDIT.
// Source: repository/repository.go

// Package mock is a generated GoMock package.
package mock

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	repository "gitlab.techvify.dev/its/internship/q2-2024/project/meeting-room-reservation/meeting-room-reservation-be/repository"
)

// MockRepository is a mock of Repository interface.
type MockRepository struct {
	ctrl     *gomock.Controller
	recorder *MockRepositoryMockRecorder
}

// MockRepositoryMockRecorder is the mock recorder for MockRepository.
type MockRepositoryMockRecorder struct {
	mock *MockRepository
}

// NewMockRepository creates a new mock instance.
func NewMockRepository(ctrl *gomock.Controller) *MockRepository {
	mock := &MockRepository{ctrl: ctrl}
	mock.recorder = &MockRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockRepository) EXPECT() *MockRepositoryMockRecorder {
	return m.recorder
}

// Booking mocks base method.
func (m *MockRepository) Booking() repository.BookingRepository {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Booking")
	ret0, _ := ret[0].(repository.BookingRepository)
	return ret0
}

// Booking indicates an expected call of Booking.
func (mr *MockRepositoryMockRecorder) Booking() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Booking", reflect.TypeOf((*MockRepository)(nil).Booking))
}

// DoInTx mocks base method.
func (m *MockRepository) DoInTx(ctx context.Context, txFunc func(context.Context, repository.Repository) error) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DoInTx", ctx, txFunc)
	ret0, _ := ret[0].(error)
	return ret0
}

// DoInTx indicates an expected call of DoInTx.
func (mr *MockRepositoryMockRecorder) DoInTx(ctx, txFunc interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DoInTx", reflect.TypeOf((*MockRepository)(nil).DoInTx), ctx, txFunc)
}

// Office mocks base method.
func (m *MockRepository) Office() repository.OfficeRepository {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Office")
	ret0, _ := ret[0].(repository.OfficeRepository)
	return ret0
}

// Office indicates an expected call of Office.
func (mr *MockRepositoryMockRecorder) Office() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Office", reflect.TypeOf((*MockRepository)(nil).Office))
}

// Role mocks base method.
func (m *MockRepository) Role() repository.RoleRepository {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Role")
	ret0, _ := ret[0].(repository.RoleRepository)
	return ret0
}

// Role indicates an expected call of Role.
func (mr *MockRepositoryMockRecorder) Role() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Role", reflect.TypeOf((*MockRepository)(nil).Role))
}

// Room mocks base method.
func (m *MockRepository) Room() repository.RoomRepository {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Room")
	ret0, _ := ret[0].(repository.RoomRepository)
	return ret0
}

// Room indicates an expected call of Room.
func (mr *MockRepositoryMockRecorder) Room() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Room", reflect.TypeOf((*MockRepository)(nil).Room))
}

// User mocks base method.
func (m *MockRepository) User() repository.UserRepository {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "User")
	ret0, _ := ret[0].(repository.UserRepository)
	return ret0
}

// User indicates an expected call of User.
func (mr *MockRepositoryMockRecorder) User() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "User", reflect.TypeOf((*MockRepository)(nil).User))
}
