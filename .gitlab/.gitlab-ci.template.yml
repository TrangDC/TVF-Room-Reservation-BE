workflow:
  rules:
    - if: $CI_PIPELINE_SOURCE == "merge_request_event" && $CI_MERGE_REQUEST_TARGET_BRANCH_NAME == "main"
      variables:
        PIPELINE_NAME: CI
    - if: $CI_COMMIT_REF_NAME == 'main'
      variables:
        PIPELINE_NAME: CD
        ENVIRONMENT: development
        SUBSCRIPTION_ID: 960dc494-982f-4e76-b6c6-c1f3fafa6d40
        DOCKER_IMAGE_TAG: ${CI_COMMIT_SHORT_SHA}
        SHARED_REGISTRY: techvifysharedregistryacr.azurecr.io
        LATEST_TAG: "latest"
    - if: $CI_COMMIT_TAG
      variables:
        PIPELINE_NAME: CD
        ENVIRONMENT: production
        SUBSCRIPTION_ID: 960dc494-982f-4e76-b6c6-c1f3fafa6d40
        DOCKER_IMAGE_TAG: ${CI_COMMIT_TAG}
        SHARED_REGISTRY: techvifysharedregistryacr.azurecr.io
        LATEST_TAG: "production"
    - when: never

variables:
  # Common variables
  RUNNER_TAG: shared_builder

default:
  interruptible: true

stages:
  - ci
  - qualitygate
  - migration
  - build
  - deploy

.azure_cli_before_script: &azure_cli_before_script
  - az login --service-principal -u ${ARM_CLIENT_ID} -p ${ARM_CLIENT_SECRET} --tenant ${ARM_TENANT_ID}
  - az account set --subscription ${SUBSCRIPTION_ID}

golangci-lint:
  image: ${DOCKER_REGISTRY_PROXY}/golangci/golangci-lint:v1.55-alpine
  stage: ci
  before_script:
    - apk add jq
  script:
    - golangci-lint run --timeout 15m0s --issues-exit-code 0 --out-format checkstyle:gl-code-quality-sonarqube.json --verbose --color always ./...
  artifacts:
    paths:
      - gl-code-quality-sonarqube.json
  allow_failure: false
  rules:
    - if: $PIPELINE_NAME == "CI"
    - when: never
  tags:
    - $RUNNER_TAG

migrate-lint:
  image: ${DOCKER_REGISTRY_PROXY}/alpine:3.18
  stage: ci
  services:
    - name: ${DOCKER_REGISTRY_PROXY}/postgres:14-alpine
      alias: postgres
  variables:
    POSTGRES_DB: backend_api
    POSTGRES_USER: postgres
    POSTGRES_PASSWORD: postgres
    POSTGRES_HOST_AUTH_METHOD: trust
  before_script:
    - |
      apk update \
      && apk add --no-cache make gettext bash curl ca-certificates jq git
    - curl -sSf https://atlasgo.sh | sh
  script:
    - |
      atlas migrate hash \
      --dir "file://migrations"
    - |
      atlas migrate apply --dry-run \
      --url postgres://${POSTGRES_USER}:${POSTGRES_PASSWORD}@postgres:5432/${POSTGRES_DB}?sslmode=disable \
      --dir "file://migrations"
  allow_failure: false
  rules:
    - if: $PIPELINE_NAME == "CI"
    - when: never
  tags:
    - $RUNNER_TAG

owasp:
  image:
    name: ${DOCKER_REGISTRY_PROXY}/ducmeit1/dependency-check
    entrypoint: [""]
  stage: ci
  variables:
    GRADLE_USER_HOME: "${CI_PROJECT_DIR}/.gradle"
  before_script:
    - mkdir report
  script:
    - /usr/share/dependency-check/bin/dependency-check.sh --scan . --project "${CI_PROJECT_NAME}" --enableExperimental --noupdate --format JSON
  allow_failure: true
  artifacts:
    paths:
      - dependency-check-report.json
  cache:
    key: "${CI_PROJECT_NAME}"
    paths:
      - .gradle/dependency-check-data
  rules:
    - if: $PIPELINE_NAME == "CI"
    - when: never
  tags:
    - $RUNNER_TAG

sonarqube:
  image:
    name: ${DOCKER_REGISTRY_PROXY}/sonarsource/sonar-scanner-cli:latest
    entrypoint: [""]
  needs:
    - job: golangci-lint
      artifacts: true
      optional: false
    - job: owasp
      artifacts: true
      optional: false
  stage: qualitygate
  variables:
    SONAR_USER_HOME: "${CI_PROJECT_DIR}/.sonar" # Defines the location of the analysis task cache
    GIT_DEPTH: "0" # Tells git to fetch all the branches of the project, required by the analysis task
  cache:
    key: "${CI_PROJECT_NAME}-sonarqube"
    policy: pull-push
    paths:
      - "${SONAR_USER_HOME}/cache"
  script:
    - |
      sonar-scanner -X \
      -Dsonar.qualitygate.wait=true \
      -Dsonar.projectKey=${CI_PROJECT_PATH_SLUG} \
      -Dsonar.projectName=${CI_PROJECT_PATH_SLUG} \
      -Dsonar.projectVersion=${CI_COMMIT_SHA:0:7} \
      -Dsonar.go.golangci-lint.reportPaths=${CI_PROJECT_DIR}/gl-code-quality-sonarqube.json \
      -Dsonar.dependencyCheck.jsonReportPath=${CI_PROJECT_DIR}/dependency-check-report.json \
      -DsourceEncoding=UTF-8 \
      -Dsonar.sources=. \
      -Dsonar.exclusions=**/*_test.go,ent/*.go,ent/**/*.go,graphql/*.go,gqlgen.yml,model/generated.go \
      -Dsonar.tests=. \
      -Dsonar.test.inclusions=**/*_test.go
  allow_failure: true
  rules:
    - if: $PIPELINE_NAME == "CI"
    - when: never
  tags:
    - $RUNNER_TAG

.migrate-dry-run:
  image: ${DOCKER_REGISTRY_PROXY}/alpine:3.18
  allow_failure: false
  stage: migration
  before_script:
    - |
      apk update \
      && apk add --no-cache make gettext bash curl ca-certificates jq git
    - curl -sSf https://atlasgo.sh | sh
  script:
    - |
      atlas migrate hash  --dir file://migrations
    - |
      atlas migrate apply --url ${POSTGRES_CONNECTION_STRING} --dir file://migrations --dry-run
  tags:
    - $RUNNER_TAG

.migrate-apply:
  image: ${DOCKER_REGISTRY_PROXY}/alpine:3.18
  when: manual
  allow_failure: false
  stage: migration
  before_script:
    - |
      apk update \
      && apk add --no-cache make gettext bash curl ca-certificates jq git
    - curl -sSf https://atlasgo.sh | sh
  script:
    - |
      atlas migrate hash \
      --dir "file://migrations"
    - |
      atlas migrate apply \
      --url ${POSTGRES_CONNECTION_STRING} \
      --dir "file://migrations"
  tags:
    - $RUNNER_TAG

build:
  stage: build
  image: mcr.microsoft.com/azure-cli
  allow_failure: false
  variables:
    GIT_TERMINAL_PROMPT: 1
    DOCKER_IMAGE_NAME: "${SHARED_REGISTRY}/roomreservation/backend"
  before_script:
    - *azure_cli_before_script
  script:
    - |
      echo "Build and push docker image ${DOCKER_IMAGE_NAME}"
      az acr build --build-arg COMMIT=${CI_COMMIT_SHORT_SHA} --file Dockerfile --image ${DOCKER_IMAGE_NAME}:${DOCKER_IMAGE_TAG} --image ${DOCKER_IMAGE_NAME}:${LATEST_TAG} --registry ${SHARED_REGISTRY} .
  rules:
    - if: $PIPELINE_NAME == "CD" && $ENVIRONMENT == "development"
    - if: $PIPELINE_NAME == "CD" && $ENVIRONMENT == "production"
    - when: never
  tags:
    - $RUNNER_TAG

.deploy:
  stage: deploy
  image: ${DOCKER_REGISTRY_PROXY}/alpine:3.18
  when: manual
  variables:
    DOCKER_IMAGE_NAME: "${SHARED_REGISTRY}/roomreservation/backend"
    KUSTOMIZATION_PATH: "roomreservation-devops/k8s/roomreservation-backend/envs/${ENVIRONMENT}"
  needs:
    - job: build
      artifacts: false
      optional: false
  allow_failure: false
  before_script:
    - |
      apk update \
      && apk add --no-cache git sed make gettext bash curl yq jq unzip
    - git config --global core.autocrlf false
    - git config --global http.sslVerify false
    - git config --global user.email "ci.bot@techvify.com.vn"
    - git config --global user.name "Gitlab CI Bot"

  script:
    - echo "Deploying roomreservation backend with new image ${DOCKER_IMAGE_NAME}:${DOCKER_IMAGE_TAG}"
    - git clone https://oauth2:$CI_TOKEN@gitlab.techvify.dev/its/internship/q2-2024/project/roomreservation-devops.git
    - cd ${KUSTOMIZATION_PATH}
      sed -i "s|newTag:.*|newTag: ${DOCKER_IMAGE_TAG}|g" kustomization.yaml
    - echo "Commiting changes..."
    - git add .
    - git commit -m "Update roomreservation backend image tag to ${DOCKER_IMAGE_TAG}"
    - echo "Pushing changes..."
    - git push

  tags:
    - $RUNNER_TAG
